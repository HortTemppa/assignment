{"version":3,"sources":["utilities/dateUtilityFunctions.js","services/holidayPlanner.js","components/ServiceContext.js","components/HolidayInput.js","components/Response.js","components/HolidayApp.js","App.js","index.js"],"names":["returnNextEndOfHolidayPeriod","startDate","dateToCompare","Date","getYear","parseISO","isBefore","format","holidayPlanner","endDate","country","isStartBeforeEnd","Error","getOverlappingDaysInIntervals","start","end","eachDayOfInterval","length","isWithinHolidayPeriod","daysToSubtract","map","intervalDay","nationalHolidays","Finland","nationalHoliday","isSunday","countSundaysAndNationalHolidays","differenceInCalendarDays","serviceContext","createContext","undefined","DateProvider","children","service","useMemo","Provider","value","HolidayInput","setError","setMessage","useState","setStartDate","setEndDate","useContext","useHolidayPlanner","onSubmit","e","preventDefault","holidays","countHolidays","error","message","setTimeout","type","onChange","target","Response","style","color","HolidayApp","App","ReactDOM","render","StrictMode","document","getElementById"],"mappings":"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","file":"static/js/main.e2056109.chunk.js","sourcesContent":["import {\n  parseISO,\n  isBefore,\n  getYear,\n  format,\n  getOverlappingDaysInIntervals,\n  eachDayOfInterval,\n  isSunday,\n} from \"date-fns\";\n\nimport nationalHolidays from \"./dates.json\";\n\nexport function returnNextEndOfHolidayPeriod(startDate) {\n  const dateToCompare = new Date(getYear(parseISO(startDate)), 2, 31);\n\n  if (\n    isBefore(parseISO(startDate), parseISO(format(dateToCompare, \"yyyy-MM-dd\")))\n  ) {\n    return dateToCompare;\n  } else {\n    return new Date(getYear(parseISO(startDate)) + 1, 2, 31);\n  }\n}\n\nexport function isWithinHolidayPeriod(startDate, endDate) {\n  const overLappingDays = getOverlappingDaysInIntervals(\n    {\n      start: parseISO(startDate),\n      end: parseISO(endDate),\n    },\n    {\n      start: parseISO(startDate),\n      end: parseISO(\n        format(returnNextEndOfHolidayPeriod(startDate), \"yyyy-MM-dd\")\n      ),\n    }\n  );\n\n  const intervalDays = eachDayOfInterval({\n    start: parseISO(startDate),\n    end: parseISO(endDate),\n  });\n\n  if (overLappingDays !== intervalDays.length - 1) {\n    return false;\n  } else {\n    return true;\n  }\n}\n\nexport function isStartBeforeEnd(startDate, endDate) {\n  if (startDate === endDate) {\n    return true;\n  }\n  return isBefore(parseISO(startDate), parseISO(endDate));\n}\n\nexport function countSundaysAndNationalHolidays(startDate, endDate) {\n  let daysToSubtract = 0;\n\n  const daysInInterval = eachDayOfInterval({\n    start: parseISO(startDate),\n    end: parseISO(endDate),\n  });\n\n  daysInInterval.map((intervalDay) => {\n    nationalHolidays.Finland.map((nationalHoliday) => {\n      if (nationalHoliday === format(intervalDay, \"yyyy-MM-dd\")) {\n        return daysToSubtract++;\n      } else {\n        return null;\n      }\n    });\n\n    if (isSunday(intervalDay)) {\n      return daysToSubtract++;\n    } else {\n      return null;\n    }\n  });\n\n  return daysToSubtract;\n}\n","import { parseISO, differenceInCalendarDays } from \"date-fns\";\n\nimport {\n  isWithinHolidayPeriod,\n  isStartBeforeEnd,\n  countSundaysAndNationalHolidays,\n} from \"../utilities/dateUtilityFunctions.js\";\n\nexport default class holidayPlanner {\n  countHolidays(startDate, endDate, country) {\n    //check if the startDate is before endDate and return an error if it is not\n\n    if (!isStartBeforeEnd(startDate, endDate)) {\n      throw new Error(\"The end date can't be before the start date\");\n    }\n\n    //check if the holiday is within the same holiday period\n\n    if (!isWithinHolidayPeriod(startDate, endDate)) {\n      throw new Error(\"The dates are not within the same holiday period\");\n    }\n\n    //count the Sundays and national holidays and subtract them from the total amount of days in the time span\n\n    const daysToSubtract = countSundaysAndNationalHolidays(startDate, endDate);\n\n    return (\n      differenceInCalendarDays(parseISO(endDate), parseISO(startDate)) +\n      1 -\n      daysToSubtract\n    );\n  }\n}\n","import React, { createContext, useContext, useMemo } from \"react\";\nimport holidayPlanner from \"../services/holidayPlanner\";\n\nconst serviceContext = createContext(undefined);\n\nexport const DateProvider = ({ children }) => {\n  const service = useMemo(() => new holidayPlanner(), []);\n\n  return (\n    <serviceContext.Provider value={service}>\n      {children}\n    </serviceContext.Provider>\n  );\n};\n\nexport function useHolidayPlanner() {\n  const service = useContext(serviceContext);\n\n  if (service === undefined) {\n    throw new Error(\"useDateService called outside of provider\");\n  }\n  return service;\n}\n","import React, { useState } from \"react\";\nimport { useHolidayPlanner } from \"./ServiceContext\";\n\nconst HolidayInput = ({ setError, setMessage }) => {\n  const [startDate, setStartDate] = useState();\n  const [endDate, setEndDate] = useState();\n\n  const holidayPlanner = useHolidayPlanner();\n\n  function handleSubmit(e) {\n    e.preventDefault();\n\n    try {\n      const holidays = holidayPlanner.countHolidays(\n        startDate,\n        endDate,\n        \"Finland\"\n      );\n\n      setMessage(\n        `This interval will consume ${holidays} days of your available vacation days.`\n      );\n    } catch (error) {\n      setError(true);\n      setMessage(error.message);\n\n      setTimeout(() => {\n        setError(false);\n        setMessage(undefined);\n      }, 3000);\n    }\n  }\n\n  return (\n    <div>\n      <h1>Holiday Planner</h1>\n      <form onSubmit={handleSubmit}>\n        <p>\n          Start Date:{\" \"}\n          <input\n            type=\"date\"\n            value={startDate}\n            onChange={(e) => setStartDate(e.target.value)}\n          ></input>\n        </p>\n        <p>\n          End Date:{\" \"}\n          <input\n            type=\"date\"\n            value={endDate}\n            onChange={(e) => setEndDate(e.target.value)}\n          ></input>\n        </p>\n        <button type=\"submit\">Send</button>\n      </form>\n    </div>\n  );\n};\n\nexport default HolidayInput;\n","import React from \"react\";\n\nconst Response = ({ error, message }) => {\n  return message ? (\n    error ? (\n      <>\n        <div>\n          <p style={{ color: \"red\" }}>{message}</p>\n        </div>\n      </>\n    ) : (\n      <div>\n        <p>{message}</p>\n      </div>\n    )\n  ) : null;\n};\n\nexport default Response;\n","import React, { useState } from \"react\";\n\nimport HolidayInput from \"./HolidayInput\";\nimport Response from \"./Response\";\n\nconst HolidayApp = () => {\n  const [error, setError] = useState(false);\n  const [message, setMessage] = useState(\"\");\n\n  return (\n    <>\n      <HolidayInput setError={setError} setMessage={setMessage} />\n      <Response error={error} message={message} />\n    </>\n  );\n};\n\nexport default HolidayApp;\n","import \"./App.css\";\n\nimport { DateProvider } from \"./components/ServiceContext\";\nimport HolidayApp from \"./components/HolidayApp\";\n\nfunction App() {\n  return (\n    <DateProvider>\n      <HolidayApp />\n    </DateProvider>\n  );\n}\n\nexport default App;\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n"],"sourceRoot":""}