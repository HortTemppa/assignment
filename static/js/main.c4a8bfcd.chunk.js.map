{"version":3,"sources":["utilities/dateUtilityFunctions.js","services/holidayPlanner.js","components/ServiceContext.js","components/HolidayInput.js","components/Response.js","components/HolidayApp.js","App.js","index.js"],"names":["returnNextEndOfHolidayPeriod","startDate","dateToCompare","Date","getYear","parseISO","isBefore","holidayPlanner","endDate","differenceInDays","lengthIsValid","Error","isStartBeforeEnd","getOverlappingDaysInIntervals","start","end","isWithinHolidayPeriod","daysToSubtract","eachDayOfInterval","map","intervalDay","nationalHolidays","Finland","nationalHoliday","format","isSunday","countSundaysAndNationalHolidays","differenceInCalendarDays","serviceContext","createContext","undefined","DateProvider","children","service","useMemo","Provider","value","HolidayInput","setError","setMessage","useState","setStartDate","setEndDate","useContext","useHolidayPlanner","onSubmit","e","preventDefault","holidays","countHolidays","error","message","console","setTimeout","type","onChange","target","Response","style","color","HolidayApp","App","ReactDOM","render","StrictMode","document","getElementById"],"mappings":"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","file":"static/js/main.c4a8bfcd.chunk.js","sourcesContent":["import {\n  parseISO,\n  isBefore,\n  getYear,\n  format,\n  getOverlappingDaysInIntervals,\n  eachDayOfInterval,\n  isSunday,\n  differenceInDays,\n} from \"date-fns\";\n\nimport nationalHolidays from \"./dates.json\";\n\nexport function returnNextEndOfHolidayPeriod(startDate) {\n  const dateToCompare = new Date(`${getYear(parseISO(startDate))}-03-31`);\n\n  if (isBefore(parseISO(startDate), parseISO(dateToCompare))) {\n    return dateToCompare;\n  } else {\n    return new Date(`${getYear(parseISO(startDate)) + 1}-03-31`);\n  }\n}\n\nexport function lengthIsValid(startDate, endDate) {\n  const length = differenceInDays(parseISO(endDate), parseISO(startDate)) + 1;\n\n  if (length > 50) {\n    return false;\n  } else {\n    return true;\n  }\n}\n\nexport function isWithinHolidayPeriod(startDate, endDate) {\n  const overLappingDays = getOverlappingDaysInIntervals(\n    {\n      start: parseISO(startDate),\n      end: returnNextEndOfHolidayPeriod(startDate),\n    },\n    {\n      start: parseISO(startDate),\n      end: parseISO(endDate),\n    }\n  );\n\n  const intervalDays = differenceInDays(parseISO(endDate), parseISO(startDate));\n\n  if (overLappingDays !== intervalDays) {\n    return false;\n  } else {\n    return true;\n  }\n}\n\nexport function isStartBeforeEnd(startDate, endDate) {\n  if (startDate === endDate) {\n    return true;\n  }\n  return isBefore(parseISO(startDate), parseISO(endDate));\n}\n\nexport function countSundaysAndNationalHolidays(startDate, endDate) {\n  let daysToSubtract = 0;\n\n  const daysInInterval = eachDayOfInterval({\n    start: parseISO(startDate),\n    end: parseISO(endDate),\n  });\n\n  daysInInterval.map((intervalDay) => {\n    nationalHolidays.Finland.map((nationalHoliday) => {\n      if (nationalHoliday === format(intervalDay, \"yyyy-MM-dd\")) {\n        return daysToSubtract++;\n      } else {\n        return null;\n      }\n    });\n\n    if (isSunday(intervalDay)) {\n      return daysToSubtract++;\n    } else {\n      return null;\n    }\n  });\n\n  return daysToSubtract;\n}\n","import { parseISO, differenceInCalendarDays } from \"date-fns\";\n\nimport {\n  isWithinHolidayPeriod,\n  isStartBeforeEnd,\n  countSundaysAndNationalHolidays,\n  lengthIsValid,\n} from \"../utilities/dateUtilityFunctions.js\";\n\nexport default class holidayPlanner {\n  countHolidays(startDate, endDate) {\n    //check that the length of the time span is not over 50 days\n\n    if (!lengthIsValid(startDate, endDate)) {\n      throw new Error(\"The selected holiday can't be over 50 days.\");\n    }\n\n    //check if the startDate is before endDate and return an error if it is not\n\n    if (!isStartBeforeEnd(startDate, endDate)) {\n      throw new Error(\"The end date can't be before the start date\");\n    }\n\n    //check if the holiday is within the same holiday period\n\n    if (!isWithinHolidayPeriod(startDate, endDate)) {\n      throw new Error(\"The dates are not within the same holiday period\");\n    }\n\n    //count the Sundays and national holidays and subtract them from the total amount of days in the time span\n\n    const daysToSubtract = countSundaysAndNationalHolidays(startDate, endDate);\n\n    return (\n      differenceInCalendarDays(parseISO(endDate), parseISO(startDate)) +\n      1 -\n      daysToSubtract\n    );\n  }\n}\n","import React, { createContext, useContext, useMemo } from \"react\";\nimport holidayPlanner from \"../services/holidayPlanner\";\n\nconst serviceContext = createContext(undefined);\n\nexport const DateProvider = ({ children }) => {\n  const service = useMemo(() => new holidayPlanner(), []);\n\n  return (\n    <serviceContext.Provider value={service}>\n      {children}\n    </serviceContext.Provider>\n  );\n};\n\nexport function useHolidayPlanner() {\n  const service = useContext(serviceContext);\n\n  if (service === undefined) {\n    throw new Error(\"useDateService called outside of provider\");\n  }\n  return service;\n}\n","import React, { useState } from \"react\";\nimport { useHolidayPlanner } from \"./ServiceContext\";\n\nconst HolidayInput = ({ setError, setMessage }) => {\n  const [startDate, setStartDate] = useState();\n  const [endDate, setEndDate] = useState();\n\n  const holidayPlanner = useHolidayPlanner();\n\n  function handleSubmit(e) {\n    e.preventDefault();\n\n    try {\n      const holidays = holidayPlanner.countHolidays(startDate, endDate);\n\n      setMessage(\n        `This interval will consume ${holidays} days of your available vacation days.`\n      );\n    } catch (error) {\n      setError(true);\n      setMessage(error.message);\n      console.error(error);\n\n      setTimeout(() => {\n        setError(false);\n        setMessage(undefined);\n      }, 3000);\n    }\n  }\n\n  return (\n    <div>\n      <h1>Holiday Planner</h1>\n      <form onSubmit={handleSubmit}>\n        <p>\n          Start Date:{\" \"}\n          <input\n            type=\"date\"\n            value={startDate}\n            onChange={(e) => setStartDate(e.target.value)}\n          ></input>\n        </p>\n        <p>\n          End Date:{\" \"}\n          <input\n            type=\"date\"\n            value={endDate}\n            onChange={(e) => setEndDate(e.target.value)}\n          ></input>\n        </p>\n        <button type=\"submit\">Send</button>\n      </form>\n    </div>\n  );\n};\n\nexport default HolidayInput;\n","import React from \"react\";\n\nconst Response = ({ error, message }) => {\n  return message ? (\n    error ? (\n      <>\n        <div>\n          <p style={{ color: \"red\" }}>{message}</p>\n        </div>\n      </>\n    ) : (\n      <div>\n        <p>{message}</p>\n      </div>\n    )\n  ) : null;\n};\n\nexport default Response;\n","import React, { useState } from \"react\";\n\nimport HolidayInput from \"./HolidayInput\";\nimport Response from \"./Response\";\n\nconst HolidayApp = () => {\n  const [error, setError] = useState(false);\n  const [message, setMessage] = useState(\"\");\n\n  return (\n    <>\n      <HolidayInput setError={setError} setMessage={setMessage} />\n      <Response error={error} message={message} />\n    </>\n  );\n};\n\nexport default HolidayApp;\n","import \"./App.css\";\n\nimport { DateProvider } from \"./components/ServiceContext\";\nimport HolidayApp from \"./components/HolidayApp\";\n\nfunction App() {\n  return (\n    <DateProvider>\n      <HolidayApp />\n    </DateProvider>\n  );\n}\n\nexport default App;\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n"],"sourceRoot":""}